<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
        ">
    <!--引入jdbc.properties文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--扫包:非Controller层-->
    <!--service层的扫描-->
    <context:component-scan base-package="ka.shibun.service"/>
    <!-- 配置连接池
     -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!--连接数据4个属性 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--maxActive: 最大连接数量 -->
        <property name="maxActive" value="150"/>
        <!--minIdle: 最小空闲连接 -->
        <property name="minIdle" value="5"/>
        <!--maxIdle: 最大空闲连接 -->
        <property name="maxIdle" value="20"/>
        <!--initialSize: 初始化连接 -->
        <property name="initialSize" value="30"/>
        <!-- 用来配置数据库断开后自动连接的 -->
        <!-- 连接被泄露时是否打印 -->
        <property name="logAbandoned" value="true"/>
        <!--removeAbandoned: 是否自动回收超时连接 -->
        <property name="removeAbandoned" value="true"/>
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
        <property name="removeAbandonedTimeout" value="10"/>
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->
        <property name="maxWait" value="1000"/>
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 -->
        <property name="minEvictableIdleTimeMillis" value="10000"/>
        <property name="validationQuery" value="SELECT NOW() FROM DUAL"/>
    </bean>
    <!--mybatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--dataSource-->
        <property name="dataSource" ref="dataSource" />
        <!--private String typeAliasesPackage; 别名的配置-->
        <property name="typeAliasesPackage" value="ka.shibun.domain"/>
        <!--private Resource[] mapperLocations;:mapper映射的配置-->
        <property name="mapperLocations" value="classpath*:ka/shibun/mapper/*.xml" />
        <!--private Interceptor[] plugins;-->
        <property name="plugins" >
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>helperDialect=mysql</value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!--mapper接口的配置:
      配置了这个mapper,以后再service就直接注入这个mapper就可以使用了
     这种一个一个的配置,假如你有很多的mapper接口,就很麻烦了
    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="" />
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean> -->
    <!--一劳永逸的mapper接口的配置:
      直接扫这个mapper接口的包,把这个包下面的所有的类都注册成一个bean,以后在service直接注入就ok
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="ka.shibun.mapper" />
    </bean>
    <!--事务的配置:
      事务有两种方式:xml和注解方式(采纳service)
      事务管理器:
    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--
        transaction-manager的默认值就是找id="transactionManager";
        如果你的事务管理器的id是这个默认值,就可以不用写这个transaction-manager="transactionManager";
        否则就要显示指定事务管理器的id值
    -->
    <tx:annotation-driven />
    <!--可以引入除了springmvc的其它的xml配置文件-->

</beans>